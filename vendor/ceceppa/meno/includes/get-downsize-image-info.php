<?php

declare(strict_types=1);

/**
 * Mimic the downsize image path generated by WordPress
 */

namespace Meno\Get;

final class GetDownsizeImageInfo {
	/**
	 * @var int $width downsized width
	 */
	private $width;

	/**
	 * @var int $height downsized height
	 */
	private $height;

	/**
	 * @var bool $crop crop the image?
	 */
	private $crop;

	/**
	 * @var array $path_part contains the image path info
	 */
	private $path_part;

	private $full_size_src;
	private $supported_mime_types = [ 'image/png', 'image/jpeg' ];
	private $is_mime_type_supported = false;

	public function __construct( string $full_size_src, string $size ) {
		$this->full_size_src = $full_size_src;

		$this->get_size_width_and_height( $size );

		$mime_type = mime_content_type( $full_size_src );
		$this->is_mime_type_supported = in_array( 
			$mime_type,
			$this->supported_mime_types
		);

		$this->path_part = pathinfo( $full_size_src );
	}

	private function get_size_width_and_height( string $size ) : void {
		$sizes = \wp_get_additional_image_sizes();
		$size = $sizes[ $size ] ?? [];

		/**
		 * The Media upload popup looks for a medium size, but we don't want
		 * to generate it just to be used in WP back-end.
		 * So, in this case we fallback to the 150x150 version.
		 */
		$this->width = $size['width'] ?? 150;
		$this->height = $size['height'] ?? 150;
		$this->crop = $size['crop'] ?? false;
	}

	/**
	 * When creating a symlink get_path must always resolve to the
	 * original link and its size.
	 */
	public function exists() : bool {
		$expected_path = $this->get_path();
		$exists = file_exists( $expected_path );
		$is_link = is_link( $expected_path );

		if ( $is_link ) {
			$this->extract_size_from_symlink();
		}

		return $exists;
	}

	private function extract_size_from_symlink() : void {
		$original_link = readlink( $this->get_path() );
		preg_match( '/-(\d+x\d+)\.(png|jpg|jpeg)$/', $original_link, $sizes );

		[ $width, $height ] = explode( 'x', $sizes[1] );

		$this->width = (int) $width;
		$this->height = (int) $height;
	}

	public function get_width() : int {
		return $this->width;
	}

	public function get_height() : int {
		return $this->height;
	}

	public function get_path() : string {
		return $this->is_mime_type_supported ? sprintf(
			'%s/%s-%dx%d.%s',
			$this->path_part['dirname'],
			$this->path_part['filename'],
			$this->width,
			$this->height,
			$this->path_part['extension']
		) : $this->full_size_src;
	}

	public function get_crop() : bool {
		return $this->crop;
	}

	public function set_width( int $width ) : void {
		$this->width = $width;
	}

	public function set_height( int $height ) : void {
		$this->height = $height;
	}

}
