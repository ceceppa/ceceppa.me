<?php

declare(strict_types=1);

namespace Meno\Downsize;

use Meno\Get\GetDownsizeImageInfo;

add_filter( 'image_downsize', __NAMESPACE__ . '\downsize_image', 10, 3 );

/**
 * Cannot use typehint because WP might pass (and does) different
 * type for some of the arguments -.-"
 *
 * @param bool|string        $return the value to return.
 * @param int|string         $attachment_id the attachment id
 * (if the post has no thumbnail $attachment_id is an empty string).
 * @param string|Traversable $size the image size
 * (it's an array when editing the image).
 */
function downsize_image( $return, $attachment_id, $size ) {
	$is_full_size = $size === 'full';

	/**
	 * When editing the image post from the back-end, $size is an array -.-"
	 */
	$is_edit_image_post    = is_array( $size );
	$is_attachment_invalid = intval( $attachment_id ) <= 0;

	$nothing_to_do = $is_full_size
									|| $is_edit_image_post
									|| $is_attachment_invalid;

	if ( $nothing_to_do ) {
		return $return;
	}

	$is_gutenberg_request = wp_doing_ajax()
												&& isset( $_POST['action'] )
												&& $_POST['action'] === 'query-attachments';

	/**
	 * TODO: Make Gutenberg selector work
	* If Gutenberg is querying for the image size availables, we don't want to
	* generate any thumbnail, until the user chose a specific size!
	*/
	if ( $is_gutenberg_request ) {
		return $return;
	}

	return get_downsize_image( (int) $attachment_id, $size );
}

/**
 * WordPress is expecting an array as output where:
 *
 * @return array has three elements:
 * 1. image path
 * 2. image widht
 * 3. image height
 */
function get_downsize_image( int $attachment_id, string $size ) : array {
	$full_size_src         = get_full_size_path( $attachment_id );
	$downsize_image        = new GetDownsizeImageInfo( $full_size_src, $size );
	$downsize_image_exists = $downsize_image->exists();

	if ( ! $downsize_image_exists ) {
		$editor = generate_downsize_image( $full_size_src, $downsize_image );

		check_or_rename_generated_file( $editor, $downsize_image );
	}

	return [
		str_replace( ABSPATH, home_url( '/' ), $downsize_image->get_path() ),
		$downsize_image->get_width(),
		$downsize_image->get_height(),
	];
}

		return;
		/**
		 * We always want to generate the resized versions
		 * from the biggest image available
		 */
function get_full_size_path( int $attachment_id ) : string {
	$full_size_src     = get_attached_file( $attachment_id );
	$original_fullsize = $full_size_src . '.original';

	if ( file_exists( $original_fullsize ) ) {
		$full_size_src = $original_fullsize;
	}

	return $full_size_src;
}

function generate_downsize_image( string $full_size_src, GetDownsizeImageInfo $downsize_image ) : array {
	$editor = wp_get_image_editor( $full_size_src );
	if ( is_wp_error( $editor ) ) {
		return [];
	}

	$editor->resize(
		$downsize_image->get_width(),
		$downsize_image->get_height(),
		$downsize_image->get_crop()
	);

	$success = $editor->save();

	return $success ? $editor->get_size() : [];
}

/**
 * WordPress generates the image filename according to the real image size,
 * and so this can differ from the one "guessed" by $downsize_image->get_path
 * when the ratio of the source image does not match with the generated one.
 * In this case we need to tell Meno what's the real path generated by WP,
 * to avoid broken images on the website.
 *
 * @param WordPress $editor
 */
function check_or_rename_generated_file( array $editor_sizes, GetDownsizeImageInfo &$downsize_image ) : void {
	if ( empty( $editor_sizes ) ) {
		return;
	}

	$expected_path = $downsize_image->get_path();
	$downsize_image->set_width( $editor_sizes['width'] );
	$downsize_image->set_height( $editor_sizes['height'] );
	$real_path = $downsize_image->get_path();

	if ( $expected_path != $real_path ) {
		symlink( $real_path, $expected_path );
	}
}
